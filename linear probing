#include <stdio.h>
#include <stdlib.h>

#define SIZE 10
struct HashEntry {
    int key;
    int value;
};

struct HashTable {
    struct HashEntry* table[SIZE];
};

struct HashTable* createHashTable() {
    struct HashTable* hashTable = (struct HashTable*)malloc(sizeof(struct HashTable));
    for (int i = 0; i < SIZE; i++) {
        hashTable->table[i] = NULL;
    }
    return hashTable;
}

int hash(int key) {
    return key % SIZE;
}

void insert(struct HashTable* hashTable, int key, int value) {
    int index = hash(key);

    while (hashTable->table[index] != NULL) {
        index = (index + 1) % SIZE; // Linear probing
    }

    struct HashEntry* newEntry = (struct HashEntry*)malloc(sizeof(struct HashEntry));
    newEntry->key = key;
    newEntry->value = value;
    hashTable->table[index] = newEntry;
}

int search(struct HashTable* hashTable, int key) {
    int index = hash(key);

    while (hashTable->table[index] != NULL) {
        if (hashTable->table[index]->key == key) {
            return hashTable->table[index]->value;
        }
        index = (index + 1) % SIZE; 
    }

    return -1;
}

void display(struct HashTable* hashTable) {
    for (int i = 0; i < SIZE; i++) {
        if (hashTable->table[i] != NULL) {
            printf("Index %d: Key %d, Value %d\n", i, hashTable->table[i]->key, hashTable->table[i]->value);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

int main() {
    struct HashTable* hashTable = createHashTable();

    insert(hashTable, 10, 100);
    insert(hashTable, 20, 200);
    insert(hashTable, 30, 300);
    insert(hashTable, 25, 250); 

    display(hashTable);

    int searchResult = search(hashTable, 20);
    if (searchResult != -1) {
        printf("Value for key 20: %d\n", searchResult);
    } else {
        printf("Key 20 not found\n");
    }

    free(hashTable);

    return 0;
}
